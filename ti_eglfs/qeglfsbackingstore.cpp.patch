--- qeglfsbackingstore.cpp.orig	2013-06-09 17:11:01.500092345 +0530
+++ qeglfsbackingstore.cpp	2013-06-09 22:44:35.604460956 +0530
@@ -44,16 +44,20 @@
 #include "qeglfswindow.h"
 
 #include <QtGui/QOpenGLContext>
 #include <QtGui/QOpenGLPaintDevice>
 #include <QtGui/QOpenGLShaderProgram>
 
 #include <QtGui/QScreen>
 
+//Prabu
+#define _TI_EGLFS
+#include "v3dfx_eglimage.h"
+
 QT_BEGIN_NAMESPACE
 
 QEglFSBackingStore::QEglFSBackingStore(QWindow *window)
     : QPlatformBackingStore(window)
     , m_context(new QOpenGLContext)
     , m_texture(0)
     , m_program(0)
 {
@@ -78,16 +82,17 @@ void QEglFSBackingStore::flush(QWindow *
     Q_UNUSED(offset);
 
     makeCurrent();
 
 #ifdef QEGL_EXTRA_DEBUG
     qWarning("QEglBackingStore::flush %p", window);
 #endif
 
+#ifndef _TI_EGLFS
     if (!m_program) {
         static const char *textureVertexProgram =
             "attribute highp vec2 vertexCoordEntry;\n"
             "attribute highp vec2 textureCoordEntry;\n"
             "varying highp vec2 textureCoord;\n"
             "void main() {\n"
             "   textureCoord = textureCoordEntry;\n"
             "   gl_Position = vec4(vertexCoordEntry, 0.0, 1.0);\n"
@@ -180,16 +185,102 @@ void QEglFSBackingStore::flush(QWindow *
     glBindTexture(GL_TEXTURE_2D, 0);
     glDisableVertexAttribArray(m_vertexCoordEntry);
     glDisableVertexAttribArray(m_textureCoordEntry);
 
     // draw the cursor
     if (QEglFSCursor *cursor = static_cast<QEglFSCursor *>(window->screen()->handle()->cursor()))
         cursor->paintOnScreen();
 
+#else //_TI_EGLFS USED
+    int m_tiEglFsInitialised = 0;
+    const GLfloat textureCoordinates[] = {
+        0, 1,
+        1, 1,
+        1, 0,
+        0, 0
+    };
+	static TISGXStreamTexEGLIMAGE* texClass;
+	static TISGXStreamEGLIMAGEDevice* deviceClass;
+	unsigned long paArray[] = {0,0}; 
+	unsigned long freeArray[] = {0, 0, 0, 0};
+
+    QRectF r = window->geometry();
+    QRectF sr = window->screen()->geometry();
+
+    GLfloat x1 = (r.left() / sr.width()) * 2 - 1;
+    GLfloat x2 = (r.right() / sr.width()) * 2 - 1;
+    GLfloat y1 = (r.top() / sr.height()) * 2 - 1;
+    GLfloat y2 = (r.bottom() / sr.height()) * 2 - 1;
+
+    const GLfloat vertexCoordinates[] = {
+        x1, y1,
+        x2, y1,
+        x2, y2,
+        x1, y2
+    };
+	const float matrixVal[16] = {
+		1.0, 0.0,0.0, 0.0,
+		0.0, 1.0, 0.0, 0.0,
+		0.0, 0.0, 1.0, 0.0,
+		0.0, 0.0, 0.0, 1.0
+		};
+	int windowWidth = r.width();
+	int windowHeight = r.height();
+	static EGLint eglAttributes[] = {
+		    EGL_GL_VIDEO_FOURCC_TI,      FOURCC_STR("YUYV"),
+		    EGL_GL_VIDEO_WIDTH_TI,       windowWidth,
+		    EGL_GL_VIDEO_HEIGHT_TI,      windowHeight,
+		    EGL_GL_VIDEO_BYTE_STRIDE_TI, windowWidth*2,
+		    EGL_GL_VIDEO_BYTE_SIZE_TI,   windowWidth*windowHeight*2,
+		    // TODO: pick proper RGB flags..
+		    EGL_GL_VIDEO_YUV_FLAGS_TI,   EGLIMAGE_FLAGS_YUV_CONFORMANT_RANGE |
+		    EGLIMAGE_FLAGS_YUV_BT601,
+		    EGL_NONE
+	    };
+	eglimage_device_attributes m_deviceAttrib = {windowWidth, windowHeight, 2, 
+						windowWidth*windowHeight*2, 
+						PVRSRV_PIXEL_FORMAT_YUV420,
+						0, //to be initialised
+						eglAttributes, 1};
+
+	static int lastDeviceClass = 0;
+	if(!m_tiEglFsInitialised)
+	{
+		deviceClass = new TISGXStreamEGLIMAGEDevice();
+		texClass = new TISGXStreamTexEGLIMAGE();
+		paArray[0] = (unsigned long)m_image.constBits();
+		m_deviceAttrib.egldisplay = eglGetCurrentDisplay();
+		deviceClass->init(&m_deviceAttrib, lastDeviceClass, paArray);
+		texClass->init(lastDeviceClass);
+		texClass->load_v_shader(NULL);
+		texClass->load_f_shader(NULL);
+		texClass->load_program();
+
+		m_vertexCoordEntry = texClass->get_attrib_location("inVertex");
+		m_textureCoordEntry = texClass->get_attrib_location("inTexCoord");
+		int matrixLocation = texClass->get_uniform_location("MVPMatrix");
+		glUniformMatrix4fv( matrixLocation, 1, GL_FALSE, matrixVal);
+
+		m_tiEglFsInitialised = 1;
+	}
+    texClass->use_program();
+    glEnableVertexAttribArray(m_vertexCoordEntry);
+    glEnableVertexAttribArray(m_textureCoordEntry);
+
+    glVertexAttribPointer(m_vertexCoordEntry, 2, GL_FLOAT, GL_FALSE, 0, vertexCoordinates);
+    glVertexAttribPointer(m_textureCoordEntry, 2, GL_FLOAT, GL_FALSE, 0, textureCoordinates);
+
+    glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
+    texClass->release_program();
+    glDisableVertexAttribArray(m_vertexCoordEntry);
+    glDisableVertexAttribArray(m_textureCoordEntry);
+#endif //_TI_EGLFS
+
+
     m_context->swapBuffers(window);
 
     m_context->doneCurrent();
 }
 
 void QEglFSBackingStore::makeCurrent()
 {
     // needed to prevent QOpenGLContext::makeCurrent() from failing
